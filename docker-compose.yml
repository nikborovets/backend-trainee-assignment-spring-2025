services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:v4.17.1
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./internal/infrastructure/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable", "up"]
    restart: on-failure

  app:
    build: .
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      JWT_SECRET: ${JWT_SECRET}
      PG_DSN: ${PG_DSN}
      GIN_MODE: ${GIN_MODE}
    ports:
      - "${APP_PORT}:8080"
      - "${GRPC_PORT}:3000"
      - "${PROMETHEUS_PORT}:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    
  test:
    build:
      context: .
      target: tester
    depends_on:
      db:
        condition: service_healthy
    environment:
      TEST_PG_DSN: ${TEST_PG_DSN_DOCKER}
    profiles:
      - test

volumes:
  pgdata: